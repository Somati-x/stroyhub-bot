import os
import requests

# --- Функція побудови промпту (перекладена з вашого buildSocialPrompt_) ---
def build_social_prompt(form_data: dict) -> str:
    """Формує текстовий запит (промпт) для мовної моделі."""
    
    social_network = form_data.get('platform', 'Instagram')
    post_type = form_data.get('goal', 'Анонс')
    variations = form_data.get('variations', 3)
    language = form_data.get('language', 'uk')
    
    topic = f"Допис про {form_data.get('propertyType', 'нерухомість')} в районі {form_data.get('district', '')}. Особливості: {form_data.get('features', '')}"

    system_prompt_parts = [
        'Ти — SMM-стратег і копірайтер рівня senior, що спеціалізується на створенні сильних текстів для Instagram, які користувачі хочуть зберігати та перечитувати.',
        'Твоя головна мета — створити текст, який захоплює увагу з перших секунд, утримує її до кінця і спонукає читача до цільової дії (підписка, коментар, збереження, покупка).',
        '### 1. Структура Ідеального Посту',
        '**1.1. Сильний Вступ (Перші 125 символів):**',
        '- Це **головна частина тексту**, яка вирішує, чи будуть його читати далі. У стрічці видно лише перші 125 символів, тому вони мають бути максимально чіпляючими.',
        '- **Обов\'язково використовуй один із трьох прийомів для вступу:**',
        '  1. **Заголовок, що розриває шаблони:** Створи інтригуючу та нестандартну назву, яка викликає цікавість (наприклад: "Як черепаха виграла забіг у зайця").',
        '  2. **Аргументація цінності:** У першому абзаці одразу поясни, яку користь читач отримає від поста (наприклад: "У цей пост я помістив усі свої 5 років досвіду...").',
        '  3. **Мотивація дочитати:** Пообіцяй наприкінці щось корисне — кейси, бонуси, детальний розбір (наприклад: "Наприкінці посту розберемо конкретні кейси...").',
        '**1.2. Основна Частина:**',
        '- **Розділяй текст на абзаци:** Ніколи не пиши суцільним полотном. Кожен абзац має містити 2-4 речення. Використовуй для розділення спеціальні пробіли або емодзі.',
        '- **Використовуй списки та розділи:** Для переліку тез, переваг або кроків використовуй списки, оформлені за допомогою тире, стрілок або емодзі. Це структурує інформацію.',
        '**1.3. Заклик до Дії (CTA):**',
        '- **Завжди розміщуй CTA в кінці посту**.',
        '- Заклик має спонукати до дискусії в коментарях, ставлячи відкрите питання читачам. Це позитивно впливає на охоплення.',
        '### 4. Формат Відповіді',
        '- Надай кожен варіант допису чітко відокремленим. Почни кожен варіант із заголовка Markdown `## Варіант N`, а потім сам текст допису.'
    ]
    system_prompt = "\n\n".join(system_prompt_parts)

    user_prompt_parts = [
        'Згенеруй текст для допису в соціальних мережах за такими параметрами:',
        f"- Соціальна мережа: {social_network}",
        f"- Тема / Інфопривід: {topic}",
        f"- Тип допису: {post_type}",
        f"- Кількість варіантів для генерації: {variations}",
        "- Тон голосу: Професійний",
        f"- Мова: {language}",
        'Результат віддай у Markdown форматі.'
    ]
    user_prompt = "\n".join(user_prompt_parts)

    # Поєднуємо системний та користувацький промпти.
    # Багато моделей краще працюють, коли системний промпт передається окремо.
    # Для OpenAI payload ми повернемо кортеж (system_prompt, user_prompt).
    return (system_prompt, user_prompt)

# --- Функція виклику LLM (перекладена з вашого callLLM_) ---
def call_llm(system_prompt: str, user_prompt: str) -> str:
    """Викликає мовну модель OpenAI з наданим промптом."""
    
    api_key = os.getenv("OPENAI_API_KEY") 
    api_url = "https://api.openai.com/v1/chat/completions"

    if not api_key:
        raise ValueError("OPENAI_API_KEY не знайдено! Додайте його в змінні середовища на Render.")

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }

    # ВАЖЛИВО: модель "gpt-4.1" не існує. Замінимо на "gpt-4-turbo-preview" або "gpt-3.5-turbo".
    payload = {
        "model": "gpt-4.1", 
        "messages": [
            { "role": "system", "content": system_prompt },
            { "role": "user", "content": user_prompt }
        ],
        "temperature": 0.7,
        "max_tokens": 1500
    }

    response = requests.post(api_url, headers=headers, json=payload)
    
    if response.status_code == 200:
        json_response = response.json()
        if json_response.get("choices"):
            return json_response["choices"][0]["message"]["content"].strip()
        else:
            # Логуємо відповідь, якщо в ній немає очікуваних ключів
            raise Exception(f"Відповідь від API не містить 'choices'. Повна відповідь: {response.text}")
    else:
        raise Exception(f"Помилка API: {response.status_code} - {response.text}")