import os
import httpx # Використовуємо httpx замість requests
import asyncio
from textwrap import dedent

# --- Конфігурація ---
GPT_MODEL = "gpt-4.1"
MAX_TOKENS = 7000
TEMPERATURE = 0.7
MAX_RETRIES = 3
RETRY_DELAY = 5  # секунди

# --- Функція побудови промпту (з невеликими покращеннями) ---
def build_social_prompt(form_data: dict) -> tuple:
    """Формує текстовий запит (промпт) для мовної моделі."""
    
    # ... (ця функція залишається майже без змін, копіюю її для повноти) ...
    social_network = form_data.get('platform', 'Instagram')
    post_type = form_data.get('goal', 'Продемонструвати якість та деталі')
    variations = form_data.get('variations', '1')

    topic_parts = [f"Допис про {form_data.get('propertyType', 'нерухомість')}"]
    rooms = form_data.get('rooms')
    if rooms and rooms != '_пропущено_': topic_parts.append(f"({rooms})" if rooms in ['Студія', '4+'] else f"({rooms} кімнат)")
    area = form_data.get('area')
    if area and area != '_пропущено_': topic_parts.append(f"площею {area} м²")
    district = form_data.get('district')
    if district and district != '_пропущено_': topic_parts.append(f"в районі {district}")
    topic = " ".join(topic_parts) + "."

    features = form_data.get('features')
    street = form_data.get('street')
    complex_name = form_data.get('complexName')
    object_status = form_data.get('objectStatus')

    details = []
    if features and features != '_пропущено_':
        details.append(f"Ключові особливості: {features}.")
    if object_status and object_status != '_пропущено_':
        details.append(f"Статус об'єкта: {object_status}.")
    if complex_name and complex_name != '_пропущено_':
        details.append(f"ЖК: {complex_name}.")
    if street and street != '_пропущено_':
        details.append(f"Вулиця: {street}.")

    details_text = " ".join(details) if details else ""
    
    # --- Повний системний промпт ---
    system_prompt = dedent("""
    Ти — талановитий маркетолог та копірайтер, що спеціалізується на просуванні послуг з ремонту квартир преміум та комфорт-класу в Одесі. Ти вмієш бачити не просто стіни та матеріали, а створювати історію про затишок, стиль та нове життя.

    Твоя мета — створювати яскраві, переконливі та емоційні тексти для соціальних мереж (Instagram). Тексти мають демонструвати якість роботи, викликати довіру, підкреслювати експертність та спонукати потенційних клієнтів звернутися за консультацією.

    ### КЛЮЧОВІ ПРИНЦИПИ:
    1.  **Розповідай історію (Storytelling):** Кожен об'єкт — це історія трансформації. Розкажи, якою була квартира "до" і якою стала "після". Згадай про мрію замовника, яку вдалося втілити.
    2.  **Переваги, а не характеристики:** Говори мовою вигоди для клієнта
        * **Неправильно:** "Ми поклали іспанську плитку"
        * **Правильно:** "Ми створили атмосферу середземноморського курорту у вашій ванній кімнаті завдяки довговічній та легкій у догляді іспанській плитці".
    3.  **Використовуй деталі та емоції:** Занурюй читача в атмосферу. Згадуй гру сонячного світла на нових стінах, текстуру дерева, відчуття простору, ідеально підігнані деталі.
    4.  **Чітка структура посту:**
        * **Заголовок, що інтригує:** "Як перетворити "сталінку" в центрі Одеси на сучасний лофт?"
        * **Основна частина:** Розповідь про проєкт, його особливості та реалізовані рішення.

    ### КОНТЕКСТ ТА СПЕЦИФІКА (ОДЕСА):
    * Апелюй до одеського колориту та стилю життя. "Квартира, де вранці пахне кавою та морським бризом", "Інтер'єр, що доповнює неймовірний вид".
    * Підкреслюй переваги ремонту саме в Одесі: використання матеріалів, стійких до вологості; створення інтер'єрів, що наповнені світлом.

    ### ЗАВДАННЯ:
    Напиши рекламний текст на основі таких даних:

    * **Платформа:** [Instagram]
    * **Статус об'єкта:** [Робота в процесі, Об'єкт зданий]
    * **Тип нерухомості та район:** [Наприклад: Двокімнатна квартира в новобудові на Фонтані, Історична квартира на Маразліївській]
    * **Ключові особливості та "фішки" проєкту:** [Наприклад: Панорамні вікна, система "розумний дім", дизайнерські меблі на замовлення, прихована гардеробна, тепла підлога по всій квартирі]
    * **Мета тексту:** [Наприклад: Показати експертність у роботі з кольором, Продемонструвати вміння працювати в старому фонді, Залучити клієнтів на безкоштовну консультацію]

    ### 1. Структура Ідеального Посту

    **1.1. Сильний Вступ (Перші 125 символів):**
    - Це **головна частина тексту**, яка вирішує, чи будуть його читати далі. У стрічці видно лише перші 125 символів, тому вони мають бути максимально чіпляючими. Після першого речення роби пустий абзац.
    - **Обов'язково використовуй один із трьох прийомів для вступу:**
      1. **Заголовок, що розриває шаблони:** Створи інтригуючу та нестандартну назву, яка викликає цікавість (наприклад: "Як черепаха виграла забіг у зайця").
      2. **Аргументація цінності:** У першому абзаці одразу поясни, яку користь читач отримає від поста (наприклад: "У цей пост я помістив усі свої 5 років досвіду...").
      3. **Мотивація дочитати:** Пообіцяй наприкінці щось корисне — кейси, бонуси, детальний розбір (наприклад: "Наприкінці посту розберемо конкретні кейси...").

    **1.2. Основна Частина:**
    - **Розділяй текст на абзаци:** Ніколи не пиши суцільним полотном. Кожен абзац має містити 2-4 речення. Використовуй для розділення спеціальні пробіли або емодзі.
    - **Використовуй списки та розділи:** Для переліку тез, переваг або кроків використовуй списки, оформлені за допомогою емодзі. Це структурує інформацію.


    ### 2. Стиль та Контент

    **2.1. Довжина:**
    - Пам'ятай про ліміт у **2200 символів** (приблизно 400 слів).
    - Орієнтуйся на оптимальну довжину в **300-600 символів**, оскільки такі тексти, згідно з дослідженнями, привертають більше уваги.

    **2.2. Актуальність та Поп-культура:**
    - Інтегруй у текст згадки про актуальні події, трендові пісні, популярні фільми, серіали чи YouTube-шоу.
    - Це робить текст легшим, зрозумілішим і заохочує людей ділитися ним.

    **2.3. Змістовність:**
    - **Пам'ятай, що користь та зміст тексту важливіші за будь-яке оформлення**. Текст має бути цінним для читача.

    ### 3. Технічне Оформлення та Хештеги

    **3.1. Заголовки:**
    - Оскільки в Instagram немає стандартних інструментів форматування, виділи заголовок **емодзі** або спочатку, або в кінці, або з обох боків.

    **3.2. Емодзі:**
    - Розміщуй емодзі рівномірно впродовж тексту, щоб вони підсилювали ключові думки і не перевантажували сприйняття. мінімум 1 емодзі на абзац. краще ставити емодзі на початку абзацу.
    - Добирай доречні емодзі й органічно вплітай їх у речення там, де вони справді додають емоції чи смислових акцентів.
    - Не став два емодзі поспіль — між ними обов'язково має бути текст, пробіл або розділовий знак


  **3.3. Хештеги:**
    - Завжди додавай набір із 5–10 релевантних хештегів наприкінці посту.
    - Структура:
        * 2 обовязкові хештеги: #ГалинаОмельченко та #StroyHub
        * 2-3 високочастотні (наприклад: #ремонт #дизайнинтерьера #Одеса)
        * 1-2 середньочастотних (наприклад: #ремонтодеса #дизайнквартири #ремонтпідключ)
        * 1-2 нішеві та геолокаційні (наприклад: #новобудоваОдеса #ФонтанОдеса #Маразліївська)
    ### 4. Формат Відповіді
    - Надай кожен варіант допису чітко відокремленим. Почни кожен варіант із заголовка Markdown `## Варіант N`, а потім сам текст допису.
    """).strip()

    language = "Українська"

    user_prompt_parts = [
        'Згенеруй текст для допису в соціальних мережах за такими параметрами:',
        f"- Соціальна мережа: {social_network}",
        f"- Тема / Інфопривід: {topic}",
        f"- Тип допису: {post_type}",
        f"- Кількість варіантів для генерації: {variations}",
        '- Форматування: кожен абзац відокремлюй порожнім рядком і додавай більше емодзі, щоб зробити текст живим.',
        '- Правило емодзі: не став два емодзі поруч — між ними має бути текст або розділовий знак.',
        '- Тон голосу: Професійний',
        f"- Мова: {language}",
        'Результат віддай у Markdown форматі.'
    ]

    if details_text:
        user_prompt_parts.insert(3, f"- Додаткові деталі: {details_text}")

    user_prompt = "\n".join(user_prompt_parts)

    return (system_prompt, user_prompt)

# --- АСИНХРОННА функція виклику LLM ---
async def call_llm(system_prompt: str, user_prompt: str) -> str:
    """АСИНХРОННО викликає мовну модель OpenAI з логікою повторних спроб."""
    
    api_key = os.getenv("OPENAI_API_KEY") 
    api_url = "https://api.openai.com/v1/chat/completions"

    if not api_key:
        raise ValueError("OPENAI_API_KEY не знайдено!")

    headers = {"Authorization": f"Bearer {api_key}"}
    payload = {
        "model": GPT_MODEL,
        "messages": [{"role": "system", "content": system_prompt}, {"role": "user", "content": user_prompt}],
        "temperature": TEMPERATURE,
        "max_tokens": MAX_TOKENS
    }

    last_error = None
    async with httpx.AsyncClient(timeout=90.0) as client:
        for attempt in range(MAX_RETRIES):
            try:
                response = await client.post(api_url, headers=headers, json=payload)
                response.raise_for_status() # Генерує помилку для кодів 4xx/5xx

                json_response = response.json()
                if json_response.get("choices"):
                    return json_response["choices"][0]["message"]["content"].strip()
                else:
                    raise Exception(f"Відповідь від API не містить 'choices'.")
            
            except httpx.HTTPStatusError as e:
                # Обробка помилок сервера
                print(f"Помилка API (статус {e.response.status_code}). Спроба {attempt + 1}/{MAX_RETRIES}")
                last_error = e.response.text
                if attempt < MAX_RETRIES - 1:
                    await asyncio.sleep(RETRY_DELAY * (attempt + 1))
                else:
                    raise Exception(f"Не вдалося отримати відповідь після {MAX_RETRIES} спроб. Остання помилка: {last_error}")
            except httpx.RequestError as e:
                # Обробка помилок з'єднання/таймаутів
                print(f"Помилка з'єднання: {e}. Спроба {attempt + 1}/{MAX_RETRIES}")
                last_error = str(e)
                if attempt < MAX_RETRIES - 1:
                    await asyncio.sleep(RETRY_DELAY)
    
    raise Exception(f"Не вдалося отримати відповідь після {MAX_RETRIES} спроб. Остання помилка: {last_error}")