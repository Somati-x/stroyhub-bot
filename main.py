# --- –†–æ–∑–¥—ñ–ª 1: –Ü–º–ø–æ—Ä—Ç–∏ ---
import os
import re
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
# ‚Üì‚Üì‚Üì –û–ù–û–í–õ–ï–ù–Ü –Ü–ú–ü–û–†–¢–ò –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä ‚Üì‚Üì‚Üì
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup, 
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from aiogram.client.default import DefaultBotProperties

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è AI
from prompt_logic import build_social_prompt, call_llm

# --- –†–æ–∑–¥—ñ–ª 2: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
BASE_WEBHOOK_URL = "https://stroyhub-bot.onrender.com"
WEBHOOK_PATH = "/webhook"

app = FastAPI()
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()

# --- –†–æ–∑–¥—ñ–ª 3: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–∑–∞—Ä–¥–∞ —Ç–∞ —Å—Ç–∞–Ω—ñ–≤ (FSM) ---
WIZARD_STEPS = [
  { 'key': 'features',     'type': 'text',   'label': '–ö–ª—é—á–æ–≤—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ', 'question': "–ö—Ä–æ–∫ 1/13: –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ —Ç–∞ '—Ñ—ñ—à–∫–∏' –ø—Ä–æ—î–∫—Ç—É." },
  { 'key': 'platform',     'type': 'choice', 'label': '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞',          'question': "–ö—Ä–æ–∫ 2/13: –û–±–µ—Ä—ñ—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.", 'options': ['Instagram', 'Facebook'] },
  { 'key': 'objectStatus', 'type': 'choice', 'label': '–°—Ç–∞—Ç—É—Å –æ–±\'—î–∫—Ç–∞',     'question': "–ö—Ä–æ–∫ 3/13: –û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±'—î–∫—Ç–∞.", 'options': ['–û–±\'—î–∫—Ç –∑–¥–∞–Ω–∏–π', '–†–æ–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ'] },
  { 'key': 'street',       'type': 'text',   'label': '–í—É–ª–∏—Ü—è',             'question': "–ö—Ä–æ–∫ 4/13: –í–∫–∞–∂—ñ—Ç—å –≤—É–ª–∏—Ü—é (–º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏)." },
  { 'key': 'district',     'type': 'text',   'label': '–†–∞–π–æ–Ω',              'question': "–ö—Ä–æ–∫ 5/13: –í–∫–∞–∂—ñ—Ç—å —Ä–∞–π–æ–Ω (–Ω–∞–ø—Ä: –ê—Ä–∫–∞–¥—ñ—è)." },
  { 'key': 'style',        'type': 'text',   'label': '–°—Ç–∏–ª—å —Ä–µ–º–æ–Ω—Ç—É',      'question': "–ö—Ä–æ–∫ 6/13: –û–ø–∏—à—ñ—Ç—å —Å—Ç–∏–ª—å —Ä–µ–º–æ–Ω—Ç—É." },
  { 'key': 'propertyType', 'type': 'choice', 'label': '–¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ',    'question': "–ö—Ä–æ–∫ 7/13: –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ.", 'options': ['–ö–≤–∞—Ä—Ç–∏—Ä–∞', '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∏', '–ë—É–¥–∏–Ω–æ–∫', '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–µ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è'] },
  { 'key': 'complexName',  'type': 'text',   'label': '–ù–∞–∑–≤–∞ –ñ–ö',           'question': "–ö—Ä–æ–∫ 8/13: –í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –ñ–ö (–º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏)." },
  { 'key': 'area',         'type': 'text',   'label': '–ü–ª–æ—â–∞, –º¬≤',          'question': "–ö—Ä–æ–∫ 9/13: –Ø–∫–∞ –ø–ª–æ—â–∞ –æ–±'—î–∫—Ç–∞ –≤ –º¬≤?" },
  { 'key': 'rooms',        'type': 'choice', 'label': '–ö-—Ç—å –∫—ñ–º–Ω–∞—Ç',        'question': "–ö—Ä–æ–∫ 10/13: –û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç.", 'options': ['1', '2', '3', '4+', '–°—Ç—É–¥—ñ—è'] },
  { 'key': 'goal',         'type': 'choice', 'label': '–ú–µ—Ç–∞ —Ç–µ–∫—Å—Ç—É',        'question': "–ö—Ä–æ–∫ 11/13: –û–±–µ—Ä—ñ—Ç—å –≥–æ–ª–æ–≤–Ω—É –º–µ—Ç—É —Ç–µ–∫—Å—Ç—É.", 'options': ['–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä—É–≤–∞—Ç–∏ —è–∫—ñ—Å—Ç—å —Ç–∞ –¥–µ—Ç–∞–ª—ñ', '–ü–æ–∫–∞–∑–∞—Ç–∏ –µ–∫—Å–ø–µ—Ä—Ç–Ω—ñ—Å—Ç—å', '–°—Ç–≤–æ—Ä–∏—Ç–∏ –µ–º–æ—Ü—ñ–π–Ω–∏–π –∑–≤\'—è–∑–æ–∫', '–ó–∞–ª—É—á–∏—Ç–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é', '–†–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é "–¥–æ/–ø—ñ—Å–ª—è"'] },
  { 'key': 'variations',   'type': 'choice', 'label': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤', 'question': "–ö—Ä–æ–∫ 12/13: –°–∫—ñ–ª—å–∫–∏ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –¥–æ–ø–∏—Å—É –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏?", 'options': ['1', '2', '3'] },
  { 'key': 'language',     'type': 'choice', 'label': '–ú–æ–≤–∞',               'question': "–ö—Ä–æ–∫ 13/13: –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É.", 'options': ['–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', '–†—É—Å—Å–∫–∏–π'] }
]

# –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞–∑–≤—É –¥–ª—è –Ω–∞—à–æ—ó –ø–æ—Å—Ç—ñ–π–Ω–æ—ó –∫–Ω–æ–ø–∫–∏
MAIN_BUTTON_TEXT = "üìù –ù–∞–ø–∏—Å–∞—Ç–∏ –Ω–æ–≤–∏–π –¥–æ–ø–∏—Å"

class Form(StatesGroup):
    in_wizard = State()

# --- –†–æ–∑–¥—ñ–ª 4: –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
async def ask_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_step_index = data.get("current_step_index", 0)

    if current_step_index >= len(WIZARD_STEPS):
        await finish_wizard(message, state, is_regenerate=False)
        return

    step = WIZARD_STEPS[current_step_index]
    keyboard = []
    
    if step['type'] == 'choice':
        buttons = [InlineKeyboardButton(text=option, callback_data=f"select:{step['key']}:{option}") for option in step['options']]
        keyboard.extend([buttons[i:i + 2] for i in range(0, len(buttons), 2)])
    else:
        keyboard.append([InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_step")])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_wizard")])
    
    await message.answer(step['question'], reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

async def finish_wizard(message: types.Message, state: FSMContext, is_regenerate: bool = False):
    data = await state.get_data()
    if not is_regenerate:
        summary = "*–î—è–∫—É—é! –í–∏ –∑–∞–ø–æ–≤–Ω–∏–ª–∏ –≤—Å—ñ –¥–∞–Ω—ñ:*\n\n"
        for step in WIZARD_STEPS:
            answer = data.get(step['key'], "_–ø—Ä–æ–ø—É—â–µ–Ω–æ_")
            summary += f"*{step['label']}:* {answer}\n"
        await message.answer(summary)
    
    await message.answer("‚è≥ *–ì–µ–Ω–µ—Ä—É—é –¥–æ–ø–∏—Å...*", reply_markup=ReplyKeyboardRemove())
    try:
        system_prompt, user_prompt = build_social_prompt(data)
        result_string = call_llm(system_prompt, user_prompt)
        posts = re.split(r'## –í–∞—Ä—ñ–∞–Ω—Ç \d+', result_string)
        posts = [post.strip() for post in posts if post.strip()]

        if not posts:
            await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ AI.\n\n" + result_string)
        else:
            for i, post in enumerate(posts):
                await message.answer(f"## –í–∞—Ä—ñ–∞–Ω—Ç {i+1}\n\n{post}")
        
        final_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîÑ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É", callback_data="regenerate"), InlineKeyboardButton(text="‚úÖ –ó–∞–∫—ñ–Ω—á–∏—Ç–∏", callback_data="finish_generation")]])
        await message.answer("–©–æ —Ä–æ–±–∏–º–æ –¥–∞–ª—ñ?", reply_markup=final_keyboard)
    except Exception as e:
        await message.answer(f"‚ùå –ü—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        final_keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É", callback_data="regenerate"), InlineKeyboardButton(text="‚ùå –ó–∞–∫—ñ–Ω—á–∏—Ç–∏", callback_data="finish_generation")]])
        await message.answer("–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑?", reply_markup=final_keyboard)

# --- –†–æ–∑–¥—ñ–ª 5: –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –¥—ñ–π ---
# ‚Üì‚Üì‚Üì –û–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä –æ–±—Ä–æ–±–ª—è—î–º–æ —ñ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ ‚Üì‚Üì‚Üì
@dp.message(F.text.in_({"/start", "/newpost", MAIN_BUTTON_TEXT}))
async def command_start_handler(message: types.Message, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –¥—ñ–∞–ª–æ–≥ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –≤—ñ–∑–∞—Ä–¥."""
    await state.clear()
    await state.set_data({"current_step_index": 0})
    await state.set_state(Form.in_wizard)
    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ—Å—Ç—ñ–π–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞ —á–∞—Å –≤—ñ–∑–∞—Ä–¥–∞
    await message.answer("üëã –í—ñ—Ç–∞—é! –î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –¥–æ–ø–∏—Å.", reply_markup=ReplyKeyboardRemove())
    await ask_question(message, state)

@dp.message(Command("cancel"))
async def cancel_handler(message: types.Message, state: FSMContext):
    """–î–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å–∫–∞—Å—É–≤–∞—Ç–∏ –¥—ñ—é –≤ –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç."""
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await send_main_menu(message) # –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–æ—é

@dp.message(Form.in_wizard, F.text)
async def process_text_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_step_index = data.get("current_step_index", 0)
    step = WIZARD_STEPS[current_step_index]
    if step['type'] == 'text':
        await state.update_data({step['key']: message.text})
        await state.update_data({"current_step_index": current_step_index + 1})
        await ask_question(message, state)
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫.")

@dp.callback_query()
async def process_callback(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    current_state = await state.get_state()
    
    if current_state == Form.in_wizard:
        data = await state.get_data()
        current_step_index = data.get("current_step_index", 0)
        if call.data == "skip_step":
            await call.message.delete()
            await state.update_data({"current_step_index": current_step_index + 1})
            await ask_question(call.message, state)
        elif call.data.startswith("select:"):
            parts = call.data.split(':')
            key, value = parts[1], parts[2]
            await state.update_data({key: value})
            await state.update_data({"current_step_index": current_step_index + 1})
            await call.message.delete()
            await ask_question(call.message, state)

    if call.data == "regenerate":
        await call.message.delete()
        await finish_wizard(call.message, state, is_regenerate=True)
    elif call.data == "finish_generation":
        await state.clear()
        await call.message.edit_text("‚úÖ –î—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞!")
        await send_main_menu(call.message)
    elif call.data == "cancel_wizard":
        await state.clear()
        await call.message.edit_text("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–ø–∏—Å—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        await send_main_menu(call.message)

# --- –†–æ–∑–¥—ñ–ª 6: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ ---
@app.post(WEBHOOK_PATH)
async def bot_webhook(update: dict):
    telegram_update = types.Update(**update)
    await dp.feed_update(bot=bot, update=telegram_update)

@app.on_event("startup")
async def on_startup():
    webhook_url = BASE_WEBHOOK_URL + WEBHOOK_PATH
    await bot.set_webhook(url=webhook_url)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()

# --- –†–æ–∑–¥—ñ–ª 7: –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ---
# ‚Üì‚Üì‚Üì –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø –¥–ª—è –ø–æ–∫–∞–∑—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚Üì‚Üì‚Üì
async def send_main_menu(message: types.Message):
    """–ù–∞–¥—Å–∏–ª–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –ø–æ—Å—Ç—ñ–π–Ω–æ—é –∫–Ω–æ–ø–∫–æ—é –≤–Ω–∏–∑—É."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=MAIN_BUTTON_TEXT)]],
        resize_keyboard=True
    )
    await message.answer("–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –¥–æ–ø–∏—Å, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /newpost.", reply_markup=keyboard)

# –¶–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ—Ç—Ä—ñ–±–µ–Ω, —â–æ–± –±–æ—Ç –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–≤ "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞" –Ω–∞ —ñ–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@dp.message()
async def echo_handler(message: types.Message):
    await send_main_menu(message)