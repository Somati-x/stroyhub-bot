import os
import re
import asyncio
import logging
from dotenv import load_dotenv
from fastapi import FastAPI
import uvicorn

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from aiogram.client.default import DefaultBotProperties

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—ñ–≤ ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

BASE_WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", "https://stroyhub-bot.onrender.com")
WEBHOOK_PATH = "/webhook"

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# --- FastAPI + Aiogram ---
app = FastAPI()
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()


def format_button_label(text: str, icon: str) -> str:
    sanitized_text = text.strip()
    if not sanitized_text:
        return icon

    chars = list(sanitized_text)
    for idx, char in enumerate(chars):
        if char.isalpha():
            chars[idx] = char.upper()
            break

    return f"{icon} {''.join(chars)}"

# --- –Ü–º–ø–æ—Ä—Ç –≤–ª–∞—Å–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ ---
from prompt_logic import build_social_prompt, call_llm

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ---
MAIN_BUTTON_TEXT = format_button_label("–ù–∞–ø–∏—Å–∞—Ç–∏ –Ω–æ–≤–∏–π –¥–æ–ø–∏—Å", "üìù")
CANCEL_WIZARD_BUTTON_TEXT = format_button_label("–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–ø–∏—Å—É", "‚ùå")
SKIP_STEP_BUTTON_TEXT = format_button_label("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", "‚è©")
CONFIRM_GENERATION_BUTTON_TEXT = format_button_label("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–æ–ø–∏—Å", "‚úÖ")
REGENERATE_BUTTON_TEXT = format_button_label("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É", "üîÑ")
FINISH_BUTTON_TEXT = format_button_label("–ó–∞–∫—ñ–Ω—á–∏—Ç–∏", "‚úÖ")
ERROR_RETRY_BUTTON_TEXT = format_button_label("–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É", "üîÑ")
ERROR_FINISH_BUTTON_TEXT = format_button_label("–ó–∞–∫—ñ–Ω—á–∏—Ç–∏", "‚ùå")
CHOICE_BUTTON_ICON = "üîπ"

# --- –ö—Ä–æ–∫–∏ ---
WIZARD_STEPS = [
    { 'key': 'features',     'type': 'text',   'label': '–ö–ª—é—á–æ–≤—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ', 'question': "–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ —â–æ –±—É–¥–µ –¥–æ–ø–∏—Å" },
    { 'key': 'platform',     'type': 'choice', 'label': '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞', 'question': "–û–±–µ—Ä—ñ—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.", 'options': ['Instagram', 'Facebook', 'Tik-Tok'] },
    { 'key': 'objectStatus', 'type': 'choice', 'label': '–°—Ç–∞—Ç—É—Å –æ–±\'—î–∫—Ç–∞', 'question': "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±'—î–∫—Ç–∞.", 'options': ['–û–±\'—î–∫—Ç –∑–¥–∞–Ω–∏–π', '–†–æ–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ'] },
    { 'key': 'street',       'type': 'text',   'label': '–í—É–ª–∏—Ü—è', 'question': "–í–∫–∞–∂—ñ—Ç—å –≤—É–ª–∏—Ü—é (–º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏)." },
    { 'key': 'district',     'type': 'text',   'label': '–†–∞–π–æ–Ω', 'question': "–í–∫–∞–∂—ñ—Ç—å —Ä–∞–π–æ–Ω (–Ω–∞–ø—Ä: –ê—Ä–∫–∞–¥—ñ—è)." },
    { 'key': 'propertyType', 'type': 'choice', 'label': '–¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ', 'question': "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ.", 'options': ['–ö–≤–∞—Ä—Ç–∏—Ä–∞', '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∏', '–ë—É–¥–∏–Ω–æ–∫', '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–µ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è'] },
    { 'key': 'complexName',  'type': 'text',   'label': '–ù–∞–∑–≤–∞ –ñ–ö', 'question': "–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –ñ–ö (–º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏)." },
    { 'key': 'area',         'type': 'text',   'label': '–ü–ª–æ—â–∞, –º¬≤', 'question': "–Ø–∫–∞ –ø–ª–æ—â–∞ –æ–±'—î–∫—Ç–∞ –≤ –º¬≤?" },
    { 'key': 'rooms',        'type': 'choice', 'label': '–ö-—Ç—å –∫—ñ–º–Ω–∞—Ç', 'question': "–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç.", 'options': ['1', '2', '3', '4+', '–°—Ç—É–¥—ñ—è'] },
    { 'key': 'goal',         'type': 'choice', 'label': '–ú–µ—Ç–∞ —Ç–µ–∫—Å—Ç—É', 'question': "–û–±–µ—Ä—ñ—Ç—å –≥–æ–ª–æ–≤–Ω—É –º–µ—Ç—É —Ç–µ–∫—Å—Ç—É.", 'options': ['–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä—É–≤–∞—Ç–∏ —è–∫—ñ—Å—Ç—å —Ç–∞ –¥–µ—Ç–∞–ª—ñ', '–ü–æ–∫–∞–∑–∞—Ç–∏ –µ–∫—Å–ø–µ—Ä—Ç–Ω—ñ—Å—Ç—å', '–°—Ç–≤–æ—Ä–∏—Ç–∏ –µ–º–æ—Ü—ñ–π–Ω–∏–π –∑–≤\'—è–∑–æ–∫', '–ó–∞–ª—É—á–∏—Ç–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é', '–†–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é \"–¥–æ/–ø—ñ—Å–ª—è\"'] },
    { 'key': 'variations',   'type': 'choice', 'label': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –¥–æ–ø–∏—Å—É', 'question': "–°–∫—ñ–ª—å–∫–∏ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –¥–æ–ø–∏—Å—É –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏?", 'options': ['1', '2', '3'] },
]

# --- FSM ---
class Form(StatesGroup):
    in_wizard = State()
    confirm_generation = State()

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
async def send_main_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=MAIN_BUTTON_TEXT)]],
        resize_keyboard=True
    )
    await message.answer(
        "–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –¥–æ–ø–∏—Å, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É",
        reply_markup=keyboard
    )


def wizard_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=CANCEL_WIZARD_BUTTON_TEXT)]],
        resize_keyboard=True
    )

async def ask_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_step_index = data.get("current_step_index", 0)
    if current_step_index >= len(WIZARD_STEPS):
        await state.set_state(Form.confirm_generation)
        await show_summary(message, state)
        return
    step = WIZARD_STEPS[current_step_index]
    keyboard = []
    if step['type'] == 'choice':
        buttons = [
            InlineKeyboardButton(
                text=format_button_label(option, CHOICE_BUTTON_ICON),
                callback_data=f"select:{step['key']}:{idx}"
            )
            for idx, option in enumerate(step['options'])
        ]
        keyboard.extend([buttons[i:i + 2] for i in range(0, len(buttons), 2)])
    else:
        keyboard.append([InlineKeyboardButton(text=SKIP_STEP_BUTTON_TEXT, callback_data="skip_step")])
    await message.answer(step['question'], reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

async def show_summary(message: types.Message, state: FSMContext):
    data = await state.get_data()
    summary_lines = ["–î—è–∫—É—é! –í–∏ –∑–∞–ø–æ–≤–Ω–∏–ª–∏ –≤—Å—ñ –¥–∞–Ω—ñ:", ""]
    for step in WIZARD_STEPS:
        answer = data.get(step['key'], "–ø—Ä–æ–ø—É—â–µ–Ω–æ")
        summary_lines.append(f"{step['label']}: {answer}")
        summary_lines.append("")
    summary_text = "\n".join(summary_lines).strip()
    await message.answer(summary_text, parse_mode=None)
    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=CONFIRM_GENERATION_BUTTON_TEXT, callback_data="confirm_generation")]]
    )
    await message.answer("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ", reply_markup=confirm_keyboard)


async def generate_posts(message: types.Message, state: FSMContext, is_regenerate: bool = False):
    data = await state.get_data()
    await state.set_state(Form.confirm_generation)
    await message.answer("‚è≥ *–ì–µ–Ω–µ—Ä—É—é –¥–æ–ø–∏—Å...*", reply_markup=ReplyKeyboardRemove())
    try:
        system_prompt, user_prompt = build_social_prompt(data)
        result_string = await call_llm(system_prompt, user_prompt)
        result_string = result_string.replace("‚Äî", "-")

        pattern = r'(## –í–∞—Ä—ñ–∞–Ω—Ç \d+.*?)(?=\n## –í–∞—Ä—ñ–∞–Ω—Ç \d+|\Z)'
        posts = re.findall(pattern, result_string, flags=re.S)
        posts = [post.strip() for post in posts if post.strip()]
        if not posts:
            await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏.\n\n" + result_string)
        else:
            for post in posts:
                await message.answer(post)
        
        final_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=REGENERATE_BUTTON_TEXT, callback_data="regenerate"),
             InlineKeyboardButton(text=FINISH_BUTTON_TEXT, callback_data="finish_generation")]
        ])
        await message.answer("–©–æ —Ä–æ–±–∏–º–æ –¥–∞–ª—ñ?", reply_markup=final_keyboard)
    except Exception as e:
        await message.answer(f"‚ùå –ü—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        final_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=ERROR_RETRY_BUTTON_TEXT, callback_data="regenerate"),
             InlineKeyboardButton(text=ERROR_FINISH_BUTTON_TEXT, callback_data="finish_generation")]
        ])
        await message.answer("–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑?", reply_markup=final_keyboard)

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ ---
@dp.message(F.text.in_({"/start", "/newpost", MAIN_BUTTON_TEXT}))
async def command_start_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_data({"current_step_index": 0})
    await state.set_state(Form.in_wizard)
    await message.answer("üëã –í—ñ—Ç–∞—é! –î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –¥–æ–ø–∏—Å.", reply_markup=wizard_keyboard())
    await ask_question(message, state)

@dp.message(F.text.lower() == CANCEL_WIZARD_BUTTON_TEXT.lower())
async def cancel_wizard_via_button(message: types.Message, state: FSMContext):
    if await state.get_state() not in {Form.in_wizard, Form.confirm_generation}:
        return
    await state.clear()
    await message.answer("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–ø–∏—Å—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await send_main_menu(message)

@dp.message(Command("cancel"))
async def cancel_handler(message: types.Message, state: FSMContext):
    if await state.get_state() is None:
        return
    await state.clear()
    await message.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await send_main_menu(message)

@dp.message(Form.in_wizard, F.text)
async def process_text_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_step_index = data.get("current_step_index", 0)
    step = WIZARD_STEPS[current_step_index]
    if step['type'] == 'text':
        await state.update_data({step['key']: message.text})
        await state.update_data({"current_step_index": current_step_index + 1})
        await ask_question(message, state)
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫.")


@dp.message(Form.confirm_generation, F.text)
async def process_confirmation_text(message: types.Message):
    await message.answer(
        f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"{CONFIRM_GENERATION_BUTTON_TEXT}\" –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ—é —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–∏–∂—á–µ."
    )

@dp.callback_query()
async def process_callback(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.answer()
    except Exception:
        pass
    
    if await state.get_state() == Form.in_wizard:
        data = await state.get_data()
        current_step_index = data.get("current_step_index", 0)
        try:
            if call.data == "skip_step":
                await call.message.delete()
                await state.update_data({"current_step_index": current_step_index + 1})
                await ask_question(call.message, state)
            elif call.data.startswith("select:"):
                parts = call.data.split(':')
                if len(parts) != 3:
                    return
                key, raw_idx = parts[1], parts[2]

                step_index = next(
                    (idx for idx, s in enumerate(WIZARD_STEPS) if s['key'] == key and s.get('type') == 'choice'),
                    None
                )
                if step_index is None or step_index != current_step_index:
                    return
                step = WIZARD_STEPS[step_index]

                try:
                    option_index = int(raw_idx)
                    selected_value = step['options'][option_index]
                except (ValueError, IndexError):
                    return

                updated_text = f"{step['question']}\n\n*‚úÖ –í–∞—à –≤–∏–±—ñ—Ä: {selected_value}*"
                await call.message.edit_text(updated_text)
                await state.update_data({key: selected_value})
                await state.update_data({"current_step_index": step_index + 1})
                await asyncio.sleep(1)
                await ask_question(call.message, state)
        except Exception:
            pass

    try:
        if call.data == "confirm_generation":
            await call.message.edit_reply_markup()
            await generate_posts(call.message, state)
        elif call.data == "regenerate":
            await call.message.delete()
            await generate_posts(call.message, state, is_regenerate=True)
        elif call.data == "finish_generation":
            await state.clear()
            await call.message.edit_text("‚úÖ –î—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞!")
            await send_main_menu(call.message)
        elif call.data == "cancel_wizard":
            await state.clear()
            await call.message.edit_text("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–ø–∏—Å—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            await send_main_menu(call.message)
    except Exception:
        pass

# --- Health-check ---
@app.get("/")
async def root():
    return {"status": "ok"}

# --- Webhook ---
@app.post(WEBHOOK_PATH)
async def bot_webhook(update: dict):
    if "update_id" not in update:  # —â–æ–± health-check –Ω–µ –∑–∞–≤–∞–∂–∞–≤
        return {"status": "ignored"}
    telegram_update = types.Update(**update)
    await dp.feed_update(bot=bot, update=telegram_update)
    return {"status": "ok"}

@app.on_event("startup")
async def on_startup():
    webhook_url = BASE_WEBHOOK_URL + WEBHOOK_PATH
    await bot.delete_webhook()
    await bot.set_webhook(url=webhook_url)
    if ADMIN_ID:
        try:
            await bot.send_message(ADMIN_ID, f"‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ!\nWebhook: {webhook_url}")
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()

# --- –ó–∞–ø—É—Å–∫ uvicorn ---
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    uvicorn.run("main:app", host="0.0.0.0", port=port, reload=False)
